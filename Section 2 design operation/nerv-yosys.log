
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `nerv.yosys' --

1. Executing Verilog-2005 frontend: nerv.sv
Parsing SystemVerilog input from `nerv.sv' to AST representation.
Generating RTLIL representation for module `\nerv'.
nerv.sv:167: Warning: System task `$write' outside initial block is unsupported.
nerv.sv:168: Warning: System task `$write' outside initial block is unsupported.
nerv.sv:414: Warning: System task `$display' outside initial block is unsupported.
nerv.sv:477: Warning: System task `$write' outside initial block is unsupported.
nerv.sv:478: Warning: System task `$write' outside initial block is unsupported.
nerv.sv:484: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \nerv

2.2.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\nerv.$proc$nerv.sv:459$107'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:228$33'.
Found and cleaned up 2 empty switches in `\nerv.$proc$nerv.sv:150$18'.
Cleaned up 6 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$nerv.sv:448$104 in module nerv.
Marked 26 switch rules as full_case in process $proc$nerv.sv:228$33 in module nerv.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nerv.$proc$nerv.sv:459$107'.
     1/8: $0\trapped_q[0:0]
     2/8: $0\reset_q[0:0]
     3/8: $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110
     4/8: $0$memwr$\regfile$nerv.sv:479$1_DATA[31:0]$109
     5/8: $0$memwr$\regfile$nerv.sv:479$1_ADDR[4:0]$108
     6/8: $0\trapped[0:0]
     7/8: $0\pc[31:0]
     8/8: $0\x10[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:448$104'.
     1/2: $1\mem_rdata[31:0]
     2/2: $0\mem_rdata[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:228$33'.
     1/108: $1\block_ID[0:0]
     2/108: $4\stall_ID[0:0]
     3/108: $5\mem_wr_enable[0:0]
     4/108: $5\mem_rd_enable[0:0]
     5/108: $13\illinsn[0:0]
     6/108: $7\next_wr[0:0]
     7/108: $14\npc[31:0]
     8/108: $4\mem_wr_enable[0:0]
     9/108: $4\mem_rd_enable[0:0]
    10/108: $12\illinsn[0:0]
    11/108: $6\next_wr[0:0]
    12/108: $5\next_rd[31:0]
    13/108: $5\next_wr[0:0]
    14/108: $11\illinsn[0:0]
    15/108: $4\next_rd[31:0]
    16/108: $4\next_wr[0:0]
    17/108: $10\illinsn[0:0]
    18/108: $4\mem_wr_strb[3:0]
    19/108: $3\mem_wr_addr[31:0]
    20/108: $3\mem_wr_strb[3:0]
    21/108: $3\mem_wr_data[31:0]
    22/108: $3\mem_wr_enable[0:0]
    23/108: $9\illinsn[0:0]
    24/108: $3\stall_ID[0:0]
    25/108: $3\mem_rd_addr[31:0]
    26/108: $3\mem_rd_func[4:0]
    27/108: $3\mem_rd_reg[4:0]
    28/108: $3\mem_rd_enable[0:0]
    29/108: $8\illinsn[0:0]
    30/108: $13\npc[31:0]
    31/108: $7\illinsn[0:0]
    32/108: $10\j_b_check[0:0]
    33/108: $12\npc[31:0]
    34/108: $9\j_b_check[0:0]
    35/108: $11\npc[31:0]
    36/108: $8\j_b_check[0:0]
    37/108: $10\npc[31:0]
    38/108: $7\j_b_check[0:0]
    39/108: $9\npc[31:0]
    40/108: $6\j_b_check[0:0]
    41/108: $8\npc[31:0]
    42/108: $5\j_b_check[0:0]
    43/108: $7\npc[31:0]
    44/108: $4\j_b_check[0:0]
    45/108: $6\npc[31:0]
    46/108: $6\illinsn[0:0]
    47/108: $5\npc[31:0]
    48/108: $5\illinsn[0:0]
    49/108: $4\npc[31:0]
    50/108: $3\next_rd[31:0]
    51/108: $3\j_b_check[0:0]
    52/108: $3\next_wr[0:0]
    53/108: $4\illinsn[0:0]
    54/108: $3\npc[31:0]
    55/108: $3\illinsn[0:0]
    56/108: $2\next_rd[31:0]
    57/108: $2\next_wr[0:0]
    58/108: $2\stall_ID[0:0]
    59/108: $2\j_b_check[0:0]
    60/108: $2\illinsn[0:0]
    61/108: $2\npc[31:0]
    62/108: $2\mem_rd_func[4:0]
    63/108: $2\mem_rd_reg[4:0]
    64/108: $2\mem_rd_addr[31:0]
    65/108: $2\mem_rd_enable[0:0]
    66/108: $2\mem_wr_strb[3:0]
    67/108: $2\mem_wr_data[31:0]
    68/108: $2\mem_wr_addr[31:0]
    69/108: $2\mem_wr_enable[0:0]
    70/108: $1\stall_ID[0:0]
    71/108: $1\j_b_check[0:0]
    72/108: $1\illinsn[0:0]
    73/108: $1\next_rd[31:0]
    74/108: $1\next_wr[0:0]
    75/108: $1\npc[31:0]
    76/108: $1\mem_rd_func[4:0]
    77/108: $1\mem_rd_reg[4:0]
    78/108: $1\mem_rd_addr[31:0]
    79/108: $1\mem_rd_enable[0:0]
    80/108: $1\mem_wr_strb[3:0]
    81/108: $1\mem_wr_data[31:0]
    82/108: $1\mem_wr_addr[31:0]
    83/108: $1\mem_wr_enable[0:0]
    84/108: $2\fw_rs1[0:0]
    85/108: $2\fw_rs2[0:0]
    86/108: $1\fw_rs2[0:0]
    87/108: $1\fw_rs1[0:0]
    88/108: $2\read_en_rs1[0:0]
    89/108: $1\read_en_rs1[0:0]
    90/108: $0\block_ID[0:0]
    91/108: $0\stall_ID[0:0]
    92/108: $0\illinsn[0:0]
    93/108: $0\next_wr[0:0]
    94/108: $0\npc[31:0]
    95/108: $0\mem_rd_enable[0:0]
    96/108: $0\mem_wr_enable[0:0]
    97/108: $0\j_b_check[0:0]
    98/108: $0\next_rd[31:0]
    99/108: $0\mem_rd_func[4:0]
   100/108: $0\mem_rd_reg[4:0]
   101/108: $0\mem_rd_addr[31:0]
   102/108: $0\mem_wr_strb[3:0]
   103/108: $0\mem_wr_data[31:0]
   104/108: $0\mem_wr_addr[31:0]
   105/108: $0\fw_rs2[0:0]
   106/108: $0\fw_rs1[0:0]
   107/108: $0\read_en_rs1[0:0]
   108/108: $0\read_en_rs2[0:0]
Creating decoders for process `\nerv.$proc$nerv.sv:150$18'.
     1/10: $0\stall_EX[0:0]
     2/10: $0\block_EX[0:0]
     3/10: $0\rs2_value[31:0]
     4/10: $0\rs1_value[31:0]
     5/10: $0\insn_EX[31:0]
     6/10: $0\imm_j_sext[31:0]
     7/10: $0\imm_b_sext[31:0]
     8/10: $0\imm_s_sext[31:0]
     9/10: $0\imm_i_sext[31:0]
    10/10: $0\ppc[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:87$9'.
     1/1: $0\imem_addr_q[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:62$2'.
     1/3: $0\mem_rd_func_q[4:0]
     2/3: $0\mem_rd_reg_q[4:0]
     3/3: $0\mem_rd_enable_q[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nerv.\mem_rdata' from process `\nerv.$proc$nerv.sv:448$104'.
No latch inferred for signal `\nerv.\mem_wr_enable' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_wr_addr' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_wr_data' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_wr_strb' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_rd_enable' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_rd_addr' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_rd_reg' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\mem_rd_func' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\npc' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\read_en_rs1' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\read_en_rs2' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\next_wr' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\next_rd' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\illinsn' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\j_b_check' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\fw_rs1' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\fw_rs2' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\block_ID' from process `\nerv.$proc$nerv.sv:228$33'.
No latch inferred for signal `\nerv.\stall_ID' from process `\nerv.$proc$nerv.sv:228$33'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nerv.\x10' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1085' with positive edge clock.
Creating register for signal `\nerv.\pc' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1086' with positive edge clock.
Creating register for signal `\nerv.\trapped' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1087' with positive edge clock.
Creating register for signal `\nerv.\trapped_q' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1088' with positive edge clock.
Creating register for signal `\nerv.\reset_q' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1089' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:479$1_ADDR' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1090' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:479$1_DATA' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1091' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:479$1_EN' using process `\nerv.$proc$nerv.sv:459$107'.
  created $dff cell `$procdff$1092' with positive edge clock.
Creating register for signal `\nerv.\ppc' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1093' with positive edge clock.
Creating register for signal `\nerv.\insn_EX' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1094' with positive edge clock.
Creating register for signal `\nerv.\rs1_value' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1095' with positive edge clock.
Creating register for signal `\nerv.\rs2_value' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1096' with positive edge clock.
Creating register for signal `\nerv.\imm_i_sext' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1097' with positive edge clock.
Creating register for signal `\nerv.\imm_s_sext' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1098' with positive edge clock.
Creating register for signal `\nerv.\imm_b_sext' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1099' with positive edge clock.
Creating register for signal `\nerv.\imm_j_sext' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1100' with positive edge clock.
Creating register for signal `\nerv.\block_EX' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1101' with positive edge clock.
Creating register for signal `\nerv.\stall_EX' using process `\nerv.$proc$nerv.sv:150$18'.
  created $dff cell `$procdff$1102' with positive edge clock.
Creating register for signal `\nerv.\imem_addr_q' using process `\nerv.$proc$nerv.sv:87$9'.
  created $dff cell `$procdff$1103' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_enable_q' using process `\nerv.$proc$nerv.sv:62$2'.
  created $dff cell `$procdff$1104' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_reg_q' using process `\nerv.$proc$nerv.sv:62$2'.
  created $dff cell `$procdff$1105' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_func_q' using process `\nerv.$proc$nerv.sv:62$2'.
  created $dff cell `$procdff$1106' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\nerv.$proc$nerv.sv:459$107'.
Removing empty process `nerv.$proc$nerv.sv:459$107'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:448$104'.
Removing empty process `nerv.$proc$nerv.sv:448$104'.
Found and cleaned up 26 empty switches in `\nerv.$proc$nerv.sv:228$33'.
Removing empty process `nerv.$proc$nerv.sv:228$33'.
Removing empty process `nerv.$proc$nerv.sv:150$18'.
Removing empty process `nerv.$proc$nerv.sv:87$9'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:62$2'.
Removing empty process `nerv.$proc$nerv.sv:62$2'.
Cleaned up 33 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~45 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 15 unused cells and 300 unused wires.
<suppressed ~17 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~636 debug messages>
Removed a total of 212 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$163: $1\stall_ID[0:0] -> 1'1
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$278.
    dead port 2/2 on $mux $procmux$280.
    dead port 2/2 on $mux $procmux$296.
    dead port 2/2 on $mux $procmux$298.
    dead port 2/2 on $mux $procmux$323.
    dead port 2/2 on $mux $procmux$325.
    dead port 2/2 on $mux $procmux$334.
    dead port 2/2 on $mux $procmux$336.
    dead port 2/2 on $mux $procmux$345.
    dead port 2/2 on $mux $procmux$347.
    dead port 2/2 on $mux $procmux$356.
    dead port 2/2 on $mux $procmux$358.
    dead port 2/2 on $mux $procmux$367.
    dead port 2/2 on $mux $procmux$369.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$1000.
    dead port 2/2 on $mux $procmux$391.
    dead port 2/2 on $mux $procmux$1008.
    dead port 2/2 on $mux $procmux$393.
    dead port 2/2 on $mux $procmux$403.
    dead port 2/2 on $mux $procmux$405.
    dead port 2/2 on $mux $procmux$415.
    dead port 2/2 on $mux $procmux$417.
    dead port 1/2 on $mux $procmux$1057.
    dead port 2/2 on $mux $procmux$427.
    dead port 2/2 on $mux $procmux$429.
    dead port 1/2 on $mux $procmux$1065.
    dead port 2/2 on $mux $procmux$439.
    dead port 2/2 on $mux $procmux$441.
    dead port 2/2 on $mux $procmux$452.
    dead port 2/2 on $mux $procmux$454.
    dead port 2/2 on $mux $procmux$465.
    dead port 2/2 on $mux $procmux$467.
    dead port 2/2 on $mux $procmux$479.
    dead port 2/2 on $mux $procmux$481.
    dead port 2/2 on $mux $procmux$483.
    dead port 2/2 on $mux $procmux$495.
    dead port 2/2 on $mux $procmux$1078.
    dead port 2/2 on $mux $procmux$497.
    dead port 2/2 on $mux $procmux$499.
    dead port 2/2 on $mux $procmux$512.
    dead port 2/2 on $mux $procmux$514.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$531.
    dead port 2/2 on $mux $procmux$533.
    dead port 2/2 on $mux $procmux$547.
    dead port 2/2 on $mux $procmux$549.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$565.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$569.
    dead port 2/2 on $mux $procmux$584.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$588.
    dead port 2/2 on $mux $procmux$603.
    dead port 2/2 on $mux $procmux$605.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$623.
    dead port 2/2 on $mux $procmux$625.
    dead port 2/2 on $mux $procmux$627.
    dead port 2/2 on $mux $procmux$643.
    dead port 2/2 on $mux $procmux$645.
    dead port 2/2 on $mux $procmux$647.
    dead port 2/2 on $mux $procmux$664.
    dead port 2/2 on $mux $procmux$666.
    dead port 2/2 on $mux $procmux$668.
    dead port 2/2 on $mux $procmux$685.
    dead port 2/2 on $mux $procmux$687.
    dead port 2/2 on $mux $procmux$689.
    dead port 2/2 on $mux $procmux$705.
    dead port 2/2 on $mux $procmux$707.
    dead port 2/2 on $mux $procmux$741.
    dead port 2/2 on $mux $procmux$743.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$757.
    dead port 2/2 on $mux $procmux$769.
    dead port 2/2 on $mux $procmux$771.
    dead port 2/2 on $mux $procmux$206.
    dead port 2/2 on $mux $procmux$208.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$799.
    dead port 2/2 on $mux $procmux$811.
    dead port 2/2 on $mux $procmux$813.
    dead port 2/2 on $mux $procmux$825.
    dead port 2/2 on $mux $procmux$827.
    dead port 2/2 on $mux $procmux$839.
    dead port 2/2 on $mux $procmux$841.
    dead port 2/2 on $mux $procmux$854.
    dead port 2/2 on $mux $procmux$856.
    dead port 2/2 on $mux $procmux$869.
    dead port 2/2 on $mux $procmux$871.
    dead port 2/2 on $mux $procmux$224.
    dead port 2/2 on $mux $procmux$882.
    dead port 2/2 on $mux $procmux$226.
    dead port 2/2 on $mux $procmux$893.
    dead port 2/2 on $mux $procmux$902.
    dead port 2/2 on $mux $procmux$914.
    dead port 2/2 on $mux $procmux$242.
    dead port 2/2 on $mux $procmux$244.
    dead port 2/2 on $mux $procmux$928.
    dead port 2/2 on $mux $procmux$940.
    dead port 2/2 on $mux $procmux$949.
    dead port 2/2 on $mux $procmux$958.
    dead port 2/2 on $mux $procmux$967.
    dead port 2/2 on $mux $procmux$976.
    dead port 2/2 on $mux $procmux$260.
    dead port 2/2 on $mux $procmux$984.
    dead port 2/2 on $mux $procmux$992.
    dead port 2/2 on $mux $procmux$262.
Removed 111 multiplexer ports.
<suppressed ~34 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$311_ANY: { $procmux$259_CMP $procmux$311_CMP [1] $procmux$311_CMP [2] }
    New input vector for $reduce_or cell $procmux$378_ANY: { $procmux$256_CMP $procmux$259_CMP $procmux$378_CMP [1] $procmux$378_CMP [2] $procmux$378_CMP [4] }
    New ctrl vector for $pmux cell $procmux$268: $auto$opt_reduce.cc:132:opt_mux$1108
    New ctrl vector for $pmux cell $procmux$1075: $auto$opt_reduce.cc:132:opt_mux$1110
    Consolidated identical input bits for $mux cell $procmux$127:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$127_Y
      New ports: A=1'0, B=1'1, Y=$procmux$127_Y [0]
      New connections: $procmux$127_Y [31:1] = { $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] $procmux$127_Y [0] }
    New ctrl vector for $pmux cell $procmux$734: $auto$opt_reduce.cc:132:opt_mux$1112
    New ctrl vector for $pmux cell $procmux$286: $auto$opt_reduce.cc:132:opt_mux$1114
    New ctrl vector for $pmux cell $procmux$213: $auto$opt_reduce.cc:132:opt_mux$1116
    New ctrl vector for $pmux cell $procmux$886: { $auto$opt_reduce.cc:132:opt_mux$1118 $procmux$756_CMP $procmux$261_CMP $procmux$207_CMP }
    New ctrl vector for $pmux cell $procmux$231: $auto$opt_reduce.cc:132:opt_mux$1120
    New ctrl vector for $pmux cell $procmux$918: { $auto$opt_reduce.cc:132:opt_mux$1122 $procmux$855_CMP $procmux$756_CMP $procmux$453_CMP $procmux$380_CMP $procmux$1007_CMP $procmux$261_CMP $procmux$207_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1107: { $procmux$198_CMP $procmux$199_CMP $procmux$203_CMP $procmux$254_CMP $procmux$255_CMP $procmux$256_CMP $procmux$257_CMP $procmux$258_CMP $procmux$259_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1109: { $procmux$1076_CMP $procmux$1077_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1111: { $procmux$254_CMP $procmux$255_CMP $procmux$256_CMP $procmux$259_CMP $procmux$308_CMP $procmux$548_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1113: { $procmux$198_CMP $procmux$199_CMP $procmux$203_CMP $procmux$254_CMP $procmux$255_CMP $procmux$256_CMP $procmux$257_CMP $procmux$258_CMP $procmux$259_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1115: { $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1117: { $procmux$855_CMP $procmux$880_CMP $procmux$881_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1119: { $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1121: { $procmux$880_CMP $procmux$881_CMP }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$129:
      Old ports: A=0, B=$procmux$127_Y, Y=$0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110
      New ports: A=1'0, B=$procmux$127_Y [0], Y=$0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0]
      New connections: $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [31:1] = { $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] $0$memwr$\regfile$nerv.sv:479$1_EN[31:0]$110 [0] }
  Optimizing cells in module \nerv.
Performed a total of 20 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 296 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory read port nerv.$memrd$\regfile$nerv.sv:485$122 (regfile).
Removed cell nerv.$ternary$nerv.sv:73$4 ($mux).
Removed cell nerv.$ternary$nerv.sv:74$6 ($mux).
Removed cell nerv.$ternary$nerv.sv:75$8 ($mux).
Removed top 31 bits (of 32) from port B of cell nerv.$gt$nerv.sv:152$19 ($gt).
Removed top 29 bits (of 32) from port B of cell nerv.$add$nerv.sv:230$34 ($add).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv.sv:288$42 ($sub).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:296$45 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:313$50 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:329$65 ($and).
Removed top 27 bits (of 32) from port B of cell nerv.$shl$nerv.sv:371$71 ($shl).
Removed top 27 bits (of 32) from port B of cell nerv.$shr$nerv.sv:449$106 ($shr).
Removed top 29 bits (of 32) from mux cell nerv.$ternary$nerv.sv:491$124 ($mux).
Removed top 31 bits (of 32) from port A of cell nerv.$sub$nerv.sv:491$125 ($sub).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv.sv:491$125 ($sub).
Removed cell nerv.$procmux$131 ($mux).
Removed cell nerv.$procmux$133 ($mux).
Removed cell nerv.$procmux$135 ($mux).
Removed cell nerv.$procmux$137 ($mux).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$157_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$196_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$197_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$198_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$199_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$200_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$201_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$202_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell nerv.$procmux$203_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$207_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$257_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$258_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$261_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$311_CMP1 ($eq).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$308_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$311_CMP2 ($eq).
Removed cell nerv.$procmux$310 ($mux).
Removed cell nerv.$procmux$312 ($mux).
Removed cell nerv.$procmux$314 ($mux).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$321 ($mux).
Removed cell nerv.$procmux$332 ($mux).
Removed cell nerv.$procmux$343 ($mux).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$378_CMP1 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$378_CMP2 ($eq).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$380_CMP0 ($eq).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$389 ($mux).
Removed cell nerv.$procmux$401 ($mux).
Removed cell nerv.$procmux$413 ($mux).
Removed cell nerv.$procmux$723 ($mux).
Removed cell nerv.$procmux$725 ($mux).
Removed cell nerv.$procmux$783 ($mux).
Removed cell nerv.$procmux$785 ($mux).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$880_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$881_CMP0 ($eq).
Removed cell nerv.$procmux$947 ($mux).
Removed cell nerv.$procmux$956 ($mux).
Removed cell nerv.$procmux$965 ($mux).
Removed cell nerv.$procmux$982 ($mux).
Removed cell nerv.$procmux$990 ($mux).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$1007_CMP0 ($eq).
Removed cell nerv.$procmux$998 ($mux).
Removed cell nerv.$procmux$1035 ($mux).
Removed cell nerv.$procmux$1029 ($mux).
Removed cell nerv.$procmux$1032 ($mux).
Removed cell nerv.$procmux$1044 ($mux).
Removed cell nerv.$procmux$1041 ($mux).
Removed cell nerv.$procmux$1047 ($mux).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$1076_CMP0 ($eq).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$1092 ($dff).
Removed top 20 bits (of 32) from FF cell nerv.$procdff$1097 ($dff).
Removed top 20 bits (of 32) from FF cell nerv.$procdff$1098 ($dff).
Removed top 19 bits (of 32) from FF cell nerv.$procdff$1099 ($dff).
Removed top 11 bits (of 32) from FF cell nerv.$procdff$1100 ($dff).
Removed top 20 bits (of 32) from port B of cell nerv.$lt$nerv.sv:383$74 ($lt).
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:383$74_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:384$75_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:401$85_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:402$86_Y.
Removed top 29 bits (of 32) from wire nerv.$ternary$nerv.sv:491$124_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 9 cells in module nerv that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$nerv.sv:405$89 ($sshr):
    Found 3 activation_patterns using ctrl signal { $procmux$207_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    Found 1 candidates: $sshr$nerv.sv:390$81
    Analyzing resource sharing with $sshr$nerv.sv:390$81 ($sshr):
      Found 3 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
      Activation pattern for cell $sshr$nerv.sv:405$89: { $procmux$207_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $sshr$nerv.sv:405$89: { $procmux$207_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:405$89: { $procmux$207_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:390$81: { $procmux$261_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $sshr$nerv.sv:390$81: { $procmux$261_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:390$81: { $procmux$261_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $sshr$nerv.sv:405$89: $auto$share.cc:986:make_cell_activation_logic$1132
      New cell: $auto$share.cc:666:make_supercell$1139 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1139 ($sshr):
    Found 6 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$207_CMP $procmux$198_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shr$nerv.sv:449$106 ($shr):
    Found 5 activation_patterns using ctrl signal { $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $procmux$155_CMP \mem_rd_enable_q }.
    Found 2 candidates: $shr$nerv.sv:404$88 $shr$nerv.sv:389$80
    Analyzing resource sharing with $shr$nerv.sv:404$88 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $procmux$155_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$155_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$156_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$157_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$158_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$156_CMP
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$158_CMP
      Size of SAT problem: 18 cells, 270 variables, 706 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$207_CMP $procmux$199_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $procmux$155_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q } = 10'1100001011
    Analyzing resource sharing with $shr$nerv.sv:389$80 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $procmux$155_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$155_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$156_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$157_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:449$106: { $procmux$158_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$156_CMP
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$155_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$158_CMP
      Size of SAT problem: 18 cells, 270 variables, 706 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$261_CMP $procmux$199_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $procmux$155_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q } = 10'1100001011
  Analyzing resource sharing options for $shr$nerv.sv:404$88 ($shr):
    Found 3 activation_patterns using ctrl signal { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    Found 1 candidates: $shr$nerv.sv:389$80
    Analyzing resource sharing with $shr$nerv.sv:389$80 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:404$88: { $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:389$80: { $procmux$261_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv.sv:404$88: $auto$share.cc:986:make_cell_activation_logic$1146
      New cell: $auto$share.cc:666:make_supercell$1153 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1153 ($shr):
    Found 6 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$207_CMP $procmux$199_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shl$nerv.sv:400$84 ($shl):
    Found 3 activation_patterns using ctrl signal { $procmux$207_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    Found 1 candidates: $shl$nerv.sv:388$79
    Analyzing resource sharing with $shl$nerv.sv:388$79 ($shl):
      Found 3 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
      Activation pattern for cell $shl$nerv.sv:400$84: { $procmux$207_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shl$nerv.sv:400$84: { $procmux$207_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:400$84: { $procmux$207_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:388$79: { $procmux$261_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shl$nerv.sv:388$79: { $procmux$261_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:388$79: { $procmux$261_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:165$24_Y } = 4'1111
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Adding exclusive control bits: $procmux$207_CMP vs. $procmux$261_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$nerv.sv:400$84: $auto$share.cc:986:make_cell_activation_logic$1160
      New cell: $auto$share.cc:666:make_supercell$1167 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1167 ($shl):
    Found 6 activation_patterns using ctrl signal { $procmux$261_CMP $procmux$207_CMP $procmux$203_CMP $logic_and$nerv.sv:276$39_Y $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:97$16 ($memrd):
    Found 1 activation_patterns using ctrl signal { $and$nerv.sv:166$27_Y $logic_not$nerv.sv:97$15_Y }.
    Found 1 candidates: $memrd$\regfile$nerv.sv:96$13
    Analyzing resource sharing with $memrd$\regfile$nerv.sv:96$13 ($memrd):
      Found 1 activation_patterns using ctrl signal { $and$nerv.sv:165$24_Y $logic_not$nerv.sv:96$12_Y }.
      Activation pattern for cell $memrd$\regfile$nerv.sv:97$16: { $and$nerv.sv:166$27_Y $logic_not$nerv.sv:97$15_Y } = 2'00
      Activation pattern for cell $memrd$\regfile$nerv.sv:96$13: { $and$nerv.sv:165$24_Y $logic_not$nerv.sv:96$12_Y } = 2'00
      Size of SAT problem: 12 cells, 127 variables, 319 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $and$nerv.sv:166$27_Y $and$nerv.sv:165$24_Y $logic_not$nerv.sv:97$15_Y $logic_not$nerv.sv:96$12_Y } = 4'0000
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:96$13 ($memrd):
    Found 1 activation_patterns using ctrl signal { $and$nerv.sv:165$24_Y $logic_not$nerv.sv:96$12_Y }.
    No candidates found.
Removing 6 cells in module nerv:
  Removing cell $shl$nerv.sv:388$79 ($shl).
  Removing cell $shl$nerv.sv:400$84 ($shl).
  Removing cell $shr$nerv.sv:389$80 ($shr).
  Removing cell $shr$nerv.sv:404$88 ($shr).
  Removing cell $sshr$nerv.sv:390$81 ($sshr).
  Removing cell $sshr$nerv.sv:405$89 ($sshr).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$428611b5d438e29cebfd18261be0c8e5ae5db6e9\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~699 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~3 debug messages>

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 75 unused wires.
<suppressed ~7 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module nerv:
  creating $macc model for $add$nerv.sv:230$34 ($add).
  creating $macc model for $add$nerv.sv:288$43 ($add).
  creating $macc model for $add$nerv.sv:295$44 ($add).
  creating $macc model for $add$nerv.sv:308$48 ($add).
  creating $macc model for $add$nerv.sv:321$54 ($add).
  creating $macc model for $add$nerv.sv:358$69 ($add).
  creating $macc model for $add$nerv.sv:398$82 ($add).
  creating $macc model for $sub$nerv.sv:288$42 ($sub).
  creating $macc model for $sub$nerv.sv:399$83 ($sub).
  creating $macc model for $sub$nerv.sv:491$125 ($sub).
  merging $macc model for $sub$nerv.sv:288$42 into $add$nerv.sv:288$43.
  creating $alu model for $macc $sub$nerv.sv:399$83.
  creating $alu model for $macc $sub$nerv.sv:491$125.
  creating $alu model for $macc $add$nerv.sv:398$82.
  creating $alu model for $macc $add$nerv.sv:358$69.
  creating $alu model for $macc $add$nerv.sv:321$54.
  creating $alu model for $macc $add$nerv.sv:308$48.
  creating $alu model for $macc $add$nerv.sv:295$44.
  creating $alu model for $macc $add$nerv.sv:230$34.
  creating $macc cell for $add$nerv.sv:288$43: $auto$alumacc.cc:354:replace_macc$1203
  creating $alu model for $ge$nerv.sv:324$59 ($ge): new $alu
  creating $alu model for $ge$nerv.sv:326$63 ($ge): merged with $sub$nerv.sv:399$83.
  creating $alu model for $gt$nerv.sv:152$19 ($gt): new $alu
  creating $alu model for $lt$nerv.sv:323$57 ($lt): merged with $ge$nerv.sv:324$59.
  creating $alu model for $lt$nerv.sv:325$61 ($lt): merged with $sub$nerv.sv:399$83.
  creating $alu model for $lt$nerv.sv:383$74 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:384$75 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:401$85 ($lt): merged with $ge$nerv.sv:324$59.
  creating $alu model for $lt$nerv.sv:402$86 ($lt): merged with $sub$nerv.sv:399$83.
  creating $alu model for $eq$nerv.sv:321$53 ($eq): merged with $sub$nerv.sv:399$83.
  creating $alu model for $ne$nerv.sv:322$55 ($ne): merged with $sub$nerv.sv:399$83.
  creating $alu cell for $lt$nerv.sv:383$74: $auto$alumacc.cc:474:replace_alu$1208
  creating $alu cell for $gt$nerv.sv:152$19: $auto$alumacc.cc:474:replace_alu$1221
  creating $alu cell for $add$nerv.sv:230$34: $auto$alumacc.cc:474:replace_alu$1228
  creating $alu cell for $add$nerv.sv:295$44: $auto$alumacc.cc:474:replace_alu$1231
  creating $alu cell for $lt$nerv.sv:384$75: $auto$alumacc.cc:474:replace_alu$1234
  creating $alu cell for $add$nerv.sv:308$48: $auto$alumacc.cc:474:replace_alu$1239
  creating $alu cell for $add$nerv.sv:321$54: $auto$alumacc.cc:474:replace_alu$1242
  creating $alu cell for $add$nerv.sv:358$69: $auto$alumacc.cc:474:replace_alu$1245
  creating $alu cell for $sub$nerv.sv:491$125: $auto$alumacc.cc:474:replace_alu$1248
  creating $alu cell for $ge$nerv.sv:324$59, $lt$nerv.sv:323$57, $lt$nerv.sv:401$85: $auto$alumacc.cc:474:replace_alu$1251
  creating $alu cell for $add$nerv.sv:398$82: $auto$alumacc.cc:474:replace_alu$1266
  creating $alu cell for $sub$nerv.sv:399$83, $ge$nerv.sv:326$63, $lt$nerv.sv:325$61, $lt$nerv.sv:402$86, $eq$nerv.sv:321$53, $ne$nerv.sv:322$55: $auto$alumacc.cc:474:replace_alu$1269
  created 12 $alu and 1 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~4 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1264: { $auto$rtlil.cc:1832:Not$1263 $auto$rtlil.cc:1835:ReduceAnd$1255 }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1161: { $auto$share.cc:976:make_cell_activation_logic$1156 [0] $auto$share.cc:976:make_cell_activation_logic$1156 [1] $auto$share.cc:976:make_cell_activation_logic$1156 [2] }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1147: { $auto$share.cc:976:make_cell_activation_logic$1142 [0] $auto$share.cc:976:make_cell_activation_logic$1142 [1] $auto$share.cc:976:make_cell_activation_logic$1142 [2] }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1133: { $auto$share.cc:976:make_cell_activation_logic$1128 [0] $auto$share.cc:976:make_cell_activation_logic$1128 [1] $auto$share.cc:976:make_cell_activation_logic$1128 [2] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1272: { $auto$alumacc.cc:490:replace_alu$1270 [0] $auto$alumacc.cc:490:replace_alu$1270 [1] $auto$alumacc.cc:490:replace_alu$1270 [2] $auto$alumacc.cc:490:replace_alu$1270 [3] $auto$alumacc.cc:490:replace_alu$1270 [4] $auto$alumacc.cc:490:replace_alu$1270 [5] $auto$alumacc.cc:490:replace_alu$1270 [6] $auto$alumacc.cc:490:replace_alu$1270 [7] $auto$alumacc.cc:490:replace_alu$1270 [8] $auto$alumacc.cc:490:replace_alu$1270 [9] $auto$alumacc.cc:490:replace_alu$1270 [10] $auto$alumacc.cc:490:replace_alu$1270 [11] $auto$alumacc.cc:490:replace_alu$1270 [12] $auto$alumacc.cc:490:replace_alu$1270 [13] $auto$alumacc.cc:490:replace_alu$1270 [14] $auto$alumacc.cc:490:replace_alu$1270 [15] $auto$alumacc.cc:490:replace_alu$1270 [16] $auto$alumacc.cc:490:replace_alu$1270 [17] $auto$alumacc.cc:490:replace_alu$1270 [18] $auto$alumacc.cc:490:replace_alu$1270 [19] $auto$alumacc.cc:490:replace_alu$1270 [20] $auto$alumacc.cc:490:replace_alu$1270 [21] $auto$alumacc.cc:490:replace_alu$1270 [22] $auto$alumacc.cc:490:replace_alu$1270 [23] $auto$alumacc.cc:490:replace_alu$1270 [24] $auto$alumacc.cc:490:replace_alu$1270 [25] $auto$alumacc.cc:490:replace_alu$1270 [26] $auto$alumacc.cc:490:replace_alu$1270 [27] $auto$alumacc.cc:490:replace_alu$1270 [28] $auto$alumacc.cc:490:replace_alu$1270 [29] $auto$alumacc.cc:490:replace_alu$1270 [30] $auto$alumacc.cc:490:replace_alu$1270 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1211: { $auto$alumacc.cc:490:replace_alu$1209 [0] $auto$alumacc.cc:490:replace_alu$1209 [1] $auto$alumacc.cc:490:replace_alu$1209 [2] $auto$alumacc.cc:490:replace_alu$1209 [3] $auto$alumacc.cc:490:replace_alu$1209 [4] $auto$alumacc.cc:490:replace_alu$1209 [5] $auto$alumacc.cc:490:replace_alu$1209 [6] $auto$alumacc.cc:490:replace_alu$1209 [7] $auto$alumacc.cc:490:replace_alu$1209 [8] $auto$alumacc.cc:490:replace_alu$1209 [9] $auto$alumacc.cc:490:replace_alu$1209 [10] $auto$alumacc.cc:490:replace_alu$1209 [11] $auto$alumacc.cc:490:replace_alu$1209 [12] $auto$alumacc.cc:490:replace_alu$1209 [13] $auto$alumacc.cc:490:replace_alu$1209 [14] $auto$alumacc.cc:490:replace_alu$1209 [15] $auto$alumacc.cc:490:replace_alu$1209 [16] $auto$alumacc.cc:490:replace_alu$1209 [17] $auto$alumacc.cc:490:replace_alu$1209 [18] $auto$alumacc.cc:490:replace_alu$1209 [19] $auto$alumacc.cc:490:replace_alu$1209 [20] $auto$alumacc.cc:490:replace_alu$1209 [21] $auto$alumacc.cc:490:replace_alu$1209 [22] $auto$alumacc.cc:490:replace_alu$1209 [23] $auto$alumacc.cc:490:replace_alu$1209 [24] $auto$alumacc.cc:490:replace_alu$1209 [25] $auto$alumacc.cc:490:replace_alu$1209 [26] $auto$alumacc.cc:490:replace_alu$1209 [27] $auto$alumacc.cc:490:replace_alu$1209 [28] $auto$alumacc.cc:490:replace_alu$1209 [29] $auto$alumacc.cc:490:replace_alu$1209 [30] $auto$alumacc.cc:490:replace_alu$1209 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1254: { $auto$alumacc.cc:490:replace_alu$1252 [0] $auto$alumacc.cc:490:replace_alu$1252 [1] $auto$alumacc.cc:490:replace_alu$1252 [2] $auto$alumacc.cc:490:replace_alu$1252 [3] $auto$alumacc.cc:490:replace_alu$1252 [4] $auto$alumacc.cc:490:replace_alu$1252 [5] $auto$alumacc.cc:490:replace_alu$1252 [6] $auto$alumacc.cc:490:replace_alu$1252 [7] $auto$alumacc.cc:490:replace_alu$1252 [8] $auto$alumacc.cc:490:replace_alu$1252 [9] $auto$alumacc.cc:490:replace_alu$1252 [10] $auto$alumacc.cc:490:replace_alu$1252 [11] $auto$alumacc.cc:490:replace_alu$1252 [12] $auto$alumacc.cc:490:replace_alu$1252 [13] $auto$alumacc.cc:490:replace_alu$1252 [14] $auto$alumacc.cc:490:replace_alu$1252 [15] $auto$alumacc.cc:490:replace_alu$1252 [16] $auto$alumacc.cc:490:replace_alu$1252 [17] $auto$alumacc.cc:490:replace_alu$1252 [18] $auto$alumacc.cc:490:replace_alu$1252 [19] $auto$alumacc.cc:490:replace_alu$1252 [20] $auto$alumacc.cc:490:replace_alu$1252 [21] $auto$alumacc.cc:490:replace_alu$1252 [22] $auto$alumacc.cc:490:replace_alu$1252 [23] $auto$alumacc.cc:490:replace_alu$1252 [24] $auto$alumacc.cc:490:replace_alu$1252 [25] $auto$alumacc.cc:490:replace_alu$1252 [26] $auto$alumacc.cc:490:replace_alu$1252 [27] $auto$alumacc.cc:490:replace_alu$1252 [28] $auto$alumacc.cc:490:replace_alu$1252 [29] $auto$alumacc.cc:490:replace_alu$1252 [30] $auto$alumacc.cc:490:replace_alu$1252 [31] }
  Optimizing cells in module \nerv.
Performed a total of 7 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 13 unused wires.
<suppressed ~3 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\regfile$nerv.sv:479$126' in module `\nerv': merged $dff to cell.
Checking cell `$memrd$\regfile$nerv.sv:485$122' in module `\nerv': merged data $dff with rd enable to cell.
Checking cell `$memrd$\regfile$nerv.sv:96$13' in module `\nerv': no (compatible) $dff found.
Checking cell `$memrd$\regfile$nerv.sv:97$16' in module `\nerv': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 9 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\nerv':
  $memwr$\regfile$nerv.sv:479$126 ($memwr)
  $memrd$\regfile$nerv.sv:96$13 ($memrd)
  $memrd$\regfile$nerv.sv:97$16 ($memrd)
  $memrd$\regfile$nerv.sv:485$122 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing nerv.regfile:
  Properties: ports=4 bits=1024 rports=3 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~60 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 35 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \regfile in module \nerv:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 1 $dff and 93 $mux cells.
  write interface: 32 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~41 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$378_ANY: { $3\j_b_check[0:0] $procmux$256_CMP $procmux$378_CMP [1] $procmux$378_CMP [2] $procmux$378_CMP [4] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1113: { $3\j_b_check[0:0] $procmux$198_CMP $procmux$199_CMP $procmux$203_CMP $procmux$254_CMP $procmux$255_CMP $procmux$256_CMP $procmux$257_CMP $procmux$258_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1111: { $3\j_b_check[0:0] $procmux$254_CMP $procmux$255_CMP $procmux$256_CMP $procmux$308_CMP $procmux$548_CMP }
    Consolidated identical input bits for $pmux cell $procmux$154:
      Old ports: A=$shr$nerv.sv:449$106_Y, B={ $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7:0] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15:0] 24'000000000000000000000000 $shr$nerv.sv:449$106_Y [7:0] 16'0000000000000000 $shr$nerv.sv:449$106_Y [15:0] }, Y=\mem_rdata
      New ports: A=$shr$nerv.sv:449$106_Y [31:8], B={ $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [7] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15] $shr$nerv.sv:449$106_Y [15:8] 40'0000000000000000000000000000000000000000 $shr$nerv.sv:449$106_Y [15:8] }, Y=\mem_rdata [31:8]
      New connections: \mem_rdata [7:0] = $shr$nerv.sv:449$106_Y [7:0]
    Consolidated identical input bits for $pmux cell $procmux$307:
      Old ports: A=4'1111, B=8'00010011, Y=$4\mem_wr_strb[3:0]
      New ports: A=2'11, B=4'0001, Y=$4\mem_wr_strb[3:0] [2:1]
      New connections: { $4\mem_wr_strb[3:0] [3] $4\mem_wr_strb[3:0] [0] } = { $4\mem_wr_strb[3:0] [2] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$450:
      Old ports: A=$6\npc[31:0], B={ $6\npc[31:0] [31:2] 2'00 }, Y=$13\npc[31:0]
      New ports: A=$6\npc[31:0] [1:0], B=2'00, Y=$13\npc[31:0] [1:0]
      New connections: $13\npc[31:0] [31:2] = $6\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$753:
      Old ports: A=$4\npc[31:0], B={ $4\npc[31:0] [31:2] 2'00 }, Y=$5\npc[31:0]
      New ports: A=$4\npc[31:0] [1:0], B=2'00, Y=$5\npc[31:0] [1:0]
      New connections: $5\npc[31:0] [31:2] = $4\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$852:
      Old ports: A=$add$nerv.sv:295$44_Y, B={ $add$nerv.sv:295$44_Y [31:2] 2'00 }, Y=$3\npc[31:0]
      New ports: A=$add$nerv.sv:295$44_Y [1:0], B=2'00, Y=$3\npc[31:0] [1:0]
      New connections: $3\npc[31:0] [31:2] = $add$nerv.sv:295$44_Y [31:2]
    Consolidated identical input bits for $mux cell $ternary$nerv.sv:491$124:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:455:run$1127 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1127 [2]
      New connections: $auto$wreduce.cc:455:run$1127 [1:0] = 2'00
  Optimizing cells in module \nerv.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 164 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper maccmap for cells of type $macc.
  add { \insn_EX [31:12] 12'000000000000 } (32 bits, unsigned)
  add \pc (32 bits, unsigned)
  add 32'11111111111111111111111111111100 (32 bits, unsigned)
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
Creating constmapped module `$paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~355 debug messages>

2.30.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~288 debug messages>
Removed 0 unused cells and 13 unused wires.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$constmap:6e3026a439ed4a6e7983ca0e910890cc59b2f7b2$paramod$639848c0e6c2f57a2478574ca6c566bbce1f0807\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=4 for cells of type $pmux.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~753 debug messages>

2.30.28. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~352 debug messages>
Removed 0 unused cells and 15 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=12\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1325 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~1441 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~2460 debug messages>
Removed a total of 820 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$10351 ($_DFF_P_) from module nerv.
Replaced 1 DFF cells.

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 281 unused cells and 1115 unused wires.
<suppressed ~282 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1221.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1221.BB [0]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1231.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1242.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[10].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [10]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [11]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [12]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [13]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [14]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [15]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [16]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [17]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [18]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [19]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [1]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [20]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [21]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [22]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [23]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [24]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [25]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [26]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [27]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [28]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [29]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [30]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[3].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [3]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[4].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [4]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [5]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[6].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [6]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[7].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [7]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[8].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [8]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[9].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.C [9]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2414.slice[0].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1231.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1242.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[0].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[10].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[11].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[12].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[13].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[14].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[15].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[16].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[17].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[18].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[19].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[20].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[21].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[22].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[23].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[24].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[25].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[26].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[27].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[28].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[29].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[30].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[31].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[4].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[5].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[6].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[7].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[8].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[9].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2414.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~487 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 138 unused wires.
<suppressed ~3 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[2].carry: CO=$auto$alumacc.cc:474:replace_alu$1248.BB [2]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2414.slice[1].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1248.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2414.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[2].carry: CO=\pc [2]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2414.slice[2].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1228.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2414.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~24 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.31.30. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module nerv:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10032 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [0] -> \regfile[5] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10033 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [1] -> \regfile[5] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10034 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [2] -> \regfile[5] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10035 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [3] -> \regfile[5] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10036 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [4] -> \regfile[5] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10037 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [5] -> \regfile[5] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10038 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [6] -> \regfile[5] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10039 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [7] -> \regfile[5] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10040 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [8] -> \regfile[5] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10041 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [9] -> \regfile[5] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10042 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [10] -> \regfile[5] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10043 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [11] -> \regfile[5] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10044 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [12] -> \regfile[5] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10045 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [13] -> \regfile[5] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10046 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [14] -> \regfile[5] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10047 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [15] -> \regfile[5] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10048 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [16] -> \regfile[5] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10049 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [17] -> \regfile[5] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10050 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [18] -> \regfile[5] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10051 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [19] -> \regfile[5] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10052 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [20] -> \regfile[5] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10053 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [21] -> \regfile[5] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10054 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [22] -> \regfile[5] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10055 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [23] -> \regfile[5] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10056 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [24] -> \regfile[5] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10057 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [25] -> \regfile[5] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10058 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [26] -> \regfile[5] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10059 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [27] -> \regfile[5] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10060 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [28] -> \regfile[5] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10061 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [29] -> \regfile[5] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10062 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [30] -> \regfile[5] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10063 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1730 [31] -> \regfile[5] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10088 to $_DFFE_PP_ for $0\pc[31:0] [0] -> \pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10089 to $_DFFE_PP_ for $0\pc[31:0] [1] -> \pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10090 to $_DFFE_PP_ for $0\pc[31:0] [2] -> \pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10091 to $_DFFE_PP_ for $0\pc[31:0] [3] -> \pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10092 to $_DFFE_PP_ for $0\pc[31:0] [4] -> \pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10093 to $_DFFE_PP_ for $0\pc[31:0] [5] -> \pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10094 to $_DFFE_PP_ for $0\pc[31:0] [6] -> \pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10095 to $_DFFE_PP_ for $0\pc[31:0] [7] -> \pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10096 to $_DFFE_PP_ for $0\pc[31:0] [8] -> \pc [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10097 to $_DFFE_PP_ for $0\pc[31:0] [9] -> \pc [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10098 to $_DFFE_PP_ for $0\pc[31:0] [10] -> \pc [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10099 to $_DFFE_PP_ for $0\pc[31:0] [11] -> \pc [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10100 to $_DFFE_PP_ for $0\pc[31:0] [12] -> \pc [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10101 to $_DFFE_PP_ for $0\pc[31:0] [13] -> \pc [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10102 to $_DFFE_PP_ for $0\pc[31:0] [14] -> \pc [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10103 to $_DFFE_PP_ for $0\pc[31:0] [15] -> \pc [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10104 to $_DFFE_PP_ for $0\pc[31:0] [16] -> \pc [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10105 to $_DFFE_PP_ for $0\pc[31:0] [17] -> \pc [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10106 to $_DFFE_PP_ for $0\pc[31:0] [18] -> \pc [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10107 to $_DFFE_PP_ for $0\pc[31:0] [19] -> \pc [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10108 to $_DFFE_PP_ for $0\pc[31:0] [20] -> \pc [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10109 to $_DFFE_PP_ for $0\pc[31:0] [21] -> \pc [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10110 to $_DFFE_PP_ for $0\pc[31:0] [22] -> \pc [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10111 to $_DFFE_PP_ for $0\pc[31:0] [23] -> \pc [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10112 to $_DFFE_PP_ for $0\pc[31:0] [24] -> \pc [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10113 to $_DFFE_PP_ for $0\pc[31:0] [25] -> \pc [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10114 to $_DFFE_PP_ for $0\pc[31:0] [26] -> \pc [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10115 to $_DFFE_PP_ for $0\pc[31:0] [27] -> \pc [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10116 to $_DFFE_PP_ for $0\pc[31:0] [28] -> \pc [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10117 to $_DFFE_PP_ for $0\pc[31:0] [29] -> \pc [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10118 to $_DFFE_PP_ for $0\pc[31:0] [30] -> \pc [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10119 to $_DFFE_PP_ for $0\pc[31:0] [31] -> \pc [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10120 to $_DFFE_PP_ for $0\trapped[0:0] -> \trapped.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10154 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [0] -> \regfile[19] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10155 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [1] -> \regfile[19] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10156 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [2] -> \regfile[19] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10157 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [3] -> \regfile[19] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10158 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [4] -> \regfile[19] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10159 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [5] -> \regfile[19] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10160 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [6] -> \regfile[19] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10161 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [7] -> \regfile[19] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10162 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [8] -> \regfile[19] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10163 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [9] -> \regfile[19] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10164 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [10] -> \regfile[19] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10165 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [11] -> \regfile[19] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10166 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [12] -> \regfile[19] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10167 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [13] -> \regfile[19] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10168 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [14] -> \regfile[19] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10169 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [15] -> \regfile[19] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10170 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [16] -> \regfile[19] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10171 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [17] -> \regfile[19] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10172 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [18] -> \regfile[19] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10173 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [19] -> \regfile[19] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10174 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [20] -> \regfile[19] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10175 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [21] -> \regfile[19] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10176 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [22] -> \regfile[19] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10177 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [23] -> \regfile[19] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10178 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [24] -> \regfile[19] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10179 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [25] -> \regfile[19] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10180 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [26] -> \regfile[19] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10181 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [27] -> \regfile[19] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10182 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [28] -> \regfile[19] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10183 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [29] -> \regfile[19] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10184 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [30] -> \regfile[19] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10185 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1828 [31] -> \regfile[19] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2111 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [0] -> \regfile[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2112 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [1] -> \regfile[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2113 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [2] -> \regfile[1] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2114 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [3] -> \regfile[1] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2115 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [4] -> \regfile[1] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2116 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [5] -> \regfile[1] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2117 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [6] -> \regfile[1] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2118 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [7] -> \regfile[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2119 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [8] -> \regfile[1] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2120 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [9] -> \regfile[1] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2121 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [10] -> \regfile[1] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2122 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [11] -> \regfile[1] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2123 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [12] -> \regfile[1] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2124 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [13] -> \regfile[1] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2125 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [14] -> \regfile[1] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2126 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [15] -> \regfile[1] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2127 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [16] -> \regfile[1] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2128 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [17] -> \regfile[1] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2129 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [18] -> \regfile[1] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2130 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [19] -> \regfile[1] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2131 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [20] -> \regfile[1] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2132 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [21] -> \regfile[1] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2133 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [22] -> \regfile[1] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2134 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [23] -> \regfile[1] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2135 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [24] -> \regfile[1] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2136 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [25] -> \regfile[1] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2137 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [26] -> \regfile[1] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2138 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [27] -> \regfile[1] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2139 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [28] -> \regfile[1] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2140 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [29] -> \regfile[1] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2141 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [30] -> \regfile[1] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2142 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1696 [31] -> \regfile[1] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2207 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [0] -> \regfile[24] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2208 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [1] -> \regfile[24] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2209 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [2] -> \regfile[24] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2210 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [3] -> \regfile[24] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2211 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [4] -> \regfile[24] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2212 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [5] -> \regfile[24] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2213 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [6] -> \regfile[24] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2214 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [7] -> \regfile[24] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2215 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [8] -> \regfile[24] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2216 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [9] -> \regfile[24] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2217 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [10] -> \regfile[24] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2218 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [11] -> \regfile[24] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2219 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [12] -> \regfile[24] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2220 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [13] -> \regfile[24] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2221 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [14] -> \regfile[24] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2222 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [15] -> \regfile[24] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2223 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [16] -> \regfile[24] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2224 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [17] -> \regfile[24] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2225 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [18] -> \regfile[24] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2226 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [19] -> \regfile[24] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2227 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [20] -> \regfile[24] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2228 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [21] -> \regfile[24] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2229 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [22] -> \regfile[24] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2230 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [23] -> \regfile[24] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2231 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [24] -> \regfile[24] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2232 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [25] -> \regfile[24] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2233 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [26] -> \regfile[24] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2234 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [27] -> \regfile[24] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2235 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [28] -> \regfile[24] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2236 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [29] -> \regfile[24] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2237 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [30] -> \regfile[24] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2238 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1864 [31] -> \regfile[24] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2239 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [0] -> \regfile[23] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2240 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [1] -> \regfile[23] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2241 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [2] -> \regfile[23] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2242 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [3] -> \regfile[23] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2243 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [4] -> \regfile[23] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2244 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [5] -> \regfile[23] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2245 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [6] -> \regfile[23] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2246 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [7] -> \regfile[23] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2247 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [8] -> \regfile[23] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2248 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [9] -> \regfile[23] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2249 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [10] -> \regfile[23] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2250 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [11] -> \regfile[23] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2251 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [12] -> \regfile[23] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2252 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [13] -> \regfile[23] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2253 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [14] -> \regfile[23] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2254 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [15] -> \regfile[23] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2255 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [16] -> \regfile[23] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2256 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [17] -> \regfile[23] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2257 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [18] -> \regfile[23] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2258 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [19] -> \regfile[23] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2259 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [20] -> \regfile[23] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2260 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [21] -> \regfile[23] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2261 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [22] -> \regfile[23] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2262 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [23] -> \regfile[23] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2263 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [24] -> \regfile[23] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2264 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [25] -> \regfile[23] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2265 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [26] -> \regfile[23] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2266 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [27] -> \regfile[23] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2267 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [28] -> \regfile[23] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2268 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [29] -> \regfile[23] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2269 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [30] -> \regfile[23] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2270 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1854 [31] -> \regfile[23] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2370 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [0] -> \regfile[28] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2371 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [1] -> \regfile[28] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2372 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [2] -> \regfile[28] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2373 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [3] -> \regfile[28] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2374 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [4] -> \regfile[28] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2375 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [5] -> \regfile[28] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2376 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [6] -> \regfile[28] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2377 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [7] -> \regfile[28] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2378 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [8] -> \regfile[28] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2379 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [9] -> \regfile[28] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2380 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [10] -> \regfile[28] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2381 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [11] -> \regfile[28] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2382 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [12] -> \regfile[28] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2383 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [13] -> \regfile[28] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2384 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [14] -> \regfile[28] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2385 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [15] -> \regfile[28] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2386 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [16] -> \regfile[28] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2387 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [17] -> \regfile[28] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2388 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [18] -> \regfile[28] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2389 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [19] -> \regfile[28] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2390 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [20] -> \regfile[28] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2391 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [21] -> \regfile[28] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2392 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [22] -> \regfile[28] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2393 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [23] -> \regfile[28] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2394 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [24] -> \regfile[28] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2395 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [25] -> \regfile[28] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2396 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [26] -> \regfile[28] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2397 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [27] -> \regfile[28] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2398 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [28] -> \regfile[28] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2399 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [29] -> \regfile[28] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2400 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [30] -> \regfile[28] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2401 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1890 [31] -> \regfile[28] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2811 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [0] -> \regfile[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2812 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [1] -> \regfile[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2813 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [2] -> \regfile[3] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2814 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [3] -> \regfile[3] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2815 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [4] -> \regfile[3] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2816 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [5] -> \regfile[3] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2817 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [6] -> \regfile[3] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2818 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [7] -> \regfile[3] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2819 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [8] -> \regfile[3] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2820 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [9] -> \regfile[3] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2821 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [10] -> \regfile[3] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2822 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [11] -> \regfile[3] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2823 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [12] -> \regfile[3] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2824 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [13] -> \regfile[3] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2825 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [14] -> \regfile[3] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2826 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [15] -> \regfile[3] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2827 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [16] -> \regfile[3] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2828 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [17] -> \regfile[3] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2829 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [18] -> \regfile[3] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2830 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [19] -> \regfile[3] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2831 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [20] -> \regfile[3] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2832 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [21] -> \regfile[3] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2833 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [22] -> \regfile[3] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2834 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [23] -> \regfile[3] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2835 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [24] -> \regfile[3] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2836 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [25] -> \regfile[3] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2837 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [26] -> \regfile[3] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2838 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [27] -> \regfile[3] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2839 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [28] -> \regfile[3] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2840 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [29] -> \regfile[3] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2841 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [30] -> \regfile[3] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2842 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1714 [31] -> \regfile[3] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2843 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [0] -> \regfile[27] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2844 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [1] -> \regfile[27] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2845 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [2] -> \regfile[27] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2846 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [3] -> \regfile[27] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2847 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [4] -> \regfile[27] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2848 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [5] -> \regfile[27] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2849 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [6] -> \regfile[27] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2850 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [7] -> \regfile[27] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2851 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [8] -> \regfile[27] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2852 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [9] -> \regfile[27] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2853 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [10] -> \regfile[27] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2854 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [11] -> \regfile[27] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2855 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [12] -> \regfile[27] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2856 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [13] -> \regfile[27] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2857 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [14] -> \regfile[27] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2858 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [15] -> \regfile[27] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2859 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [16] -> \regfile[27] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2860 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [17] -> \regfile[27] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2861 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [18] -> \regfile[27] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2862 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [19] -> \regfile[27] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2863 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [20] -> \regfile[27] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2864 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [21] -> \regfile[27] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2865 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [22] -> \regfile[27] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2866 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [23] -> \regfile[27] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2867 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [24] -> \regfile[27] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2868 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [25] -> \regfile[27] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2869 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [26] -> \regfile[27] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2870 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [27] -> \regfile[27] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2871 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [28] -> \regfile[27] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2872 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [29] -> \regfile[27] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2873 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [30] -> \regfile[27] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2874 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1882 [31] -> \regfile[27] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2907 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [0] -> \regfile[6] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2908 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [1] -> \regfile[6] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2909 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [2] -> \regfile[6] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2910 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [3] -> \regfile[6] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2911 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [4] -> \regfile[6] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2912 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [5] -> \regfile[6] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2913 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [6] -> \regfile[6] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2914 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [7] -> \regfile[6] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2915 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [8] -> \regfile[6] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2916 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [9] -> \regfile[6] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2917 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [10] -> \regfile[6] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2918 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [11] -> \regfile[6] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2919 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [12] -> \regfile[6] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2920 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [13] -> \regfile[6] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2921 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [14] -> \regfile[6] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2922 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [15] -> \regfile[6] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2923 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [16] -> \regfile[6] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2924 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [17] -> \regfile[6] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2925 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [18] -> \regfile[6] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2926 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [19] -> \regfile[6] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2927 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [20] -> \regfile[6] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2928 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [21] -> \regfile[6] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2929 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [22] -> \regfile[6] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2930 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [23] -> \regfile[6] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2931 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [24] -> \regfile[6] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2932 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [25] -> \regfile[6] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2933 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [26] -> \regfile[6] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2934 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [27] -> \regfile[6] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2935 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [28] -> \regfile[6] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2936 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [29] -> \regfile[6] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2937 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [30] -> \regfile[6] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2938 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1736 [31] -> \regfile[6] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2939 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [0] -> \regfile[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2940 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [1] -> \regfile[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2941 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [2] -> \regfile[2] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2942 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [3] -> \regfile[2] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2943 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [4] -> \regfile[2] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2944 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [5] -> \regfile[2] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2945 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [6] -> \regfile[2] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2946 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [7] -> \regfile[2] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2947 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [8] -> \regfile[2] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2948 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [9] -> \regfile[2] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2949 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [10] -> \regfile[2] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2950 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [11] -> \regfile[2] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2951 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [12] -> \regfile[2] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2952 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [13] -> \regfile[2] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2953 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [14] -> \regfile[2] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2954 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [15] -> \regfile[2] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2955 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [16] -> \regfile[2] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2956 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [17] -> \regfile[2] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2957 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [18] -> \regfile[2] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2958 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [19] -> \regfile[2] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2959 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [20] -> \regfile[2] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2960 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [21] -> \regfile[2] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2961 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [22] -> \regfile[2] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2962 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [23] -> \regfile[2] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2963 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [24] -> \regfile[2] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2964 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [25] -> \regfile[2] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2965 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [26] -> \regfile[2] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2966 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [27] -> \regfile[2] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2967 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [28] -> \regfile[2] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2968 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [29] -> \regfile[2] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2969 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [30] -> \regfile[2] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2970 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1706 [31] -> \regfile[2] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2973 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [0] -> \regfile[18] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2974 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [1] -> \regfile[18] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2975 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [2] -> \regfile[18] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2976 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [3] -> \regfile[18] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2977 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [4] -> \regfile[18] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2978 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [5] -> \regfile[18] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2979 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [6] -> \regfile[18] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2980 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [7] -> \regfile[18] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2981 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [8] -> \regfile[18] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2982 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [9] -> \regfile[18] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2983 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [10] -> \regfile[18] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2984 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [11] -> \regfile[18] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2985 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [12] -> \regfile[18] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2986 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [13] -> \regfile[18] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2987 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [14] -> \regfile[18] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2988 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [15] -> \regfile[18] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2989 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [16] -> \regfile[18] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2990 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [17] -> \regfile[18] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2991 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [18] -> \regfile[18] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2992 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [19] -> \regfile[18] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2993 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [20] -> \regfile[18] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2994 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [21] -> \regfile[18] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2995 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [22] -> \regfile[18] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2996 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [23] -> \regfile[18] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2997 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [24] -> \regfile[18] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2998 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [25] -> \regfile[18] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2999 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [26] -> \regfile[18] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3000 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [27] -> \regfile[18] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3001 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [28] -> \regfile[18] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3002 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [29] -> \regfile[18] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3003 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [30] -> \regfile[18] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3004 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1822 [31] -> \regfile[18] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3005 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [0] -> \regfile[21] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3006 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [1] -> \regfile[21] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3007 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [2] -> \regfile[21] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3008 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [3] -> \regfile[21] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3009 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [4] -> \regfile[21] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3010 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [5] -> \regfile[21] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3011 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [6] -> \regfile[21] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3012 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [7] -> \regfile[21] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3013 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [8] -> \regfile[21] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3014 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [9] -> \regfile[21] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3015 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [10] -> \regfile[21] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3016 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [11] -> \regfile[21] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3017 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [12] -> \regfile[21] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3018 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [13] -> \regfile[21] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3019 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [14] -> \regfile[21] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3020 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [15] -> \regfile[21] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3021 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [16] -> \regfile[21] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3022 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [17] -> \regfile[21] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3023 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [18] -> \regfile[21] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3024 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [19] -> \regfile[21] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3025 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [20] -> \regfile[21] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3026 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [21] -> \regfile[21] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3027 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [22] -> \regfile[21] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3028 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [23] -> \regfile[21] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3029 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [24] -> \regfile[21] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3030 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [25] -> \regfile[21] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3031 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [26] -> \regfile[21] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3032 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [27] -> \regfile[21] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3033 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [28] -> \regfile[21] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3034 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [29] -> \regfile[21] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3035 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [30] -> \regfile[21] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3036 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1842 [31] -> \regfile[21] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3037 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [0] -> \regfile[25] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3038 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [1] -> \regfile[25] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3039 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [2] -> \regfile[25] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3040 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [3] -> \regfile[25] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3041 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [4] -> \regfile[25] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3042 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [5] -> \regfile[25] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3043 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [6] -> \regfile[25] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3044 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [7] -> \regfile[25] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3045 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [8] -> \regfile[25] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3046 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [9] -> \regfile[25] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3047 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [10] -> \regfile[25] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3048 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [11] -> \regfile[25] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3049 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [12] -> \regfile[25] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3050 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [13] -> \regfile[25] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3051 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [14] -> \regfile[25] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3052 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [15] -> \regfile[25] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3053 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [16] -> \regfile[25] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3054 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [17] -> \regfile[25] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3055 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [18] -> \regfile[25] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3056 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [19] -> \regfile[25] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3057 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [20] -> \regfile[25] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3058 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [21] -> \regfile[25] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3059 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [22] -> \regfile[25] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3060 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [23] -> \regfile[25] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3061 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [24] -> \regfile[25] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3062 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [25] -> \regfile[25] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3063 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [26] -> \regfile[25] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3064 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [27] -> \regfile[25] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3065 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [28] -> \regfile[25] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3066 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [29] -> \regfile[25] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3067 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [30] -> \regfile[25] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3068 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1870 [31] -> \regfile[25] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3069 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [0] -> \regfile[17] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3070 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [1] -> \regfile[17] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3071 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [2] -> \regfile[17] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3072 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [3] -> \regfile[17] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3073 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [4] -> \regfile[17] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3074 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [5] -> \regfile[17] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3075 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [6] -> \regfile[17] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3076 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [7] -> \regfile[17] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3077 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [8] -> \regfile[17] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3078 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [9] -> \regfile[17] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3079 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [10] -> \regfile[17] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3080 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [11] -> \regfile[17] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3081 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [12] -> \regfile[17] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3082 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [13] -> \regfile[17] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3083 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [14] -> \regfile[17] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3084 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [15] -> \regfile[17] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3085 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [16] -> \regfile[17] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3086 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [17] -> \regfile[17] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3087 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [18] -> \regfile[17] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3088 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [19] -> \regfile[17] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3089 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [20] -> \regfile[17] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3090 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [21] -> \regfile[17] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3091 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [22] -> \regfile[17] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3092 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [23] -> \regfile[17] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3093 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [24] -> \regfile[17] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3094 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [25] -> \regfile[17] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3095 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [26] -> \regfile[17] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3096 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [27] -> \regfile[17] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3097 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [28] -> \regfile[17] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3098 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [29] -> \regfile[17] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3099 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [30] -> \regfile[17] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3100 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1816 [31] -> \regfile[17] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3101 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [0] -> \regfile[13] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3102 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [1] -> \regfile[13] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3103 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [2] -> \regfile[13] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3104 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [3] -> \regfile[13] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3105 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [4] -> \regfile[13] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3106 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [5] -> \regfile[13] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3107 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [6] -> \regfile[13] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3108 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [7] -> \regfile[13] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3109 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [8] -> \regfile[13] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3110 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [9] -> \regfile[13] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3111 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [10] -> \regfile[13] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3112 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [11] -> \regfile[13] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3113 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [12] -> \regfile[13] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3114 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [13] -> \regfile[13] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3115 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [14] -> \regfile[13] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3116 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [15] -> \regfile[13] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3117 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [16] -> \regfile[13] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3118 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [17] -> \regfile[13] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3119 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [18] -> \regfile[13] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3120 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [19] -> \regfile[13] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3121 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [20] -> \regfile[13] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3122 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [21] -> \regfile[13] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3123 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [22] -> \regfile[13] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3124 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [23] -> \regfile[13] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3125 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [24] -> \regfile[13] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3126 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [25] -> \regfile[13] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3127 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [26] -> \regfile[13] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3128 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [27] -> \regfile[13] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3129 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [28] -> \regfile[13] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3130 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [29] -> \regfile[13] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3131 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [30] -> \regfile[13] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3132 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1786 [31] -> \regfile[13] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3133 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [0] -> \regfile[7] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3134 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [1] -> \regfile[7] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3135 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [2] -> \regfile[7] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3136 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [3] -> \regfile[7] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3137 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [4] -> \regfile[7] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3138 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [5] -> \regfile[7] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3139 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [6] -> \regfile[7] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3140 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [7] -> \regfile[7] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3141 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [8] -> \regfile[7] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3142 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [9] -> \regfile[7] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3143 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [10] -> \regfile[7] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3144 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [11] -> \regfile[7] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3145 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [12] -> \regfile[7] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3146 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [13] -> \regfile[7] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3147 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [14] -> \regfile[7] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3148 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [15] -> \regfile[7] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3149 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [16] -> \regfile[7] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3150 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [17] -> \regfile[7] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3151 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [18] -> \regfile[7] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3152 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [19] -> \regfile[7] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3153 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [20] -> \regfile[7] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3154 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [21] -> \regfile[7] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3155 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [22] -> \regfile[7] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3156 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [23] -> \regfile[7] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3157 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [24] -> \regfile[7] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3158 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [25] -> \regfile[7] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3159 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [26] -> \regfile[7] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3160 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [27] -> \regfile[7] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3161 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [28] -> \regfile[7] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3162 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [29] -> \regfile[7] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3163 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [30] -> \regfile[7] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3164 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1742 [31] -> \regfile[7] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3222 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [0] -> \regfile[31] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3223 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [1] -> \regfile[31] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3224 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [2] -> \regfile[31] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3225 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [3] -> \regfile[31] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3226 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [4] -> \regfile[31] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3227 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [5] -> \regfile[31] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3228 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [6] -> \regfile[31] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3229 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [7] -> \regfile[31] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3230 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [8] -> \regfile[31] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3231 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [9] -> \regfile[31] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3232 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [10] -> \regfile[31] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3233 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [11] -> \regfile[31] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3234 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [12] -> \regfile[31] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3235 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [13] -> \regfile[31] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3236 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [14] -> \regfile[31] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3237 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [15] -> \regfile[31] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3238 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [16] -> \regfile[31] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3239 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [17] -> \regfile[31] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3240 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [18] -> \regfile[31] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3241 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [19] -> \regfile[31] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3242 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [20] -> \regfile[31] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3243 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [21] -> \regfile[31] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3244 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [22] -> \regfile[31] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3245 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [23] -> \regfile[31] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3246 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [24] -> \regfile[31] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3247 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [25] -> \regfile[31] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3248 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [26] -> \regfile[31] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3249 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [27] -> \regfile[31] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3250 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [28] -> \regfile[31] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3251 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [29] -> \regfile[31] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3252 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [30] -> \regfile[31] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3253 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1908 [31] -> \regfile[31] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3495 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [0] -> \regfile[26] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3496 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [1] -> \regfile[26] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3497 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [2] -> \regfile[26] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3498 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [3] -> \regfile[26] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3499 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [4] -> \regfile[26] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3500 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [5] -> \regfile[26] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3501 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [6] -> \regfile[26] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3502 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [7] -> \regfile[26] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3503 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [8] -> \regfile[26] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3504 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [9] -> \regfile[26] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3505 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [10] -> \regfile[26] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3506 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [11] -> \regfile[26] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3507 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [12] -> \regfile[26] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3508 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [13] -> \regfile[26] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3509 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [14] -> \regfile[26] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3510 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [15] -> \regfile[26] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3511 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [16] -> \regfile[26] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3512 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [17] -> \regfile[26] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3513 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [18] -> \regfile[26] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3514 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [19] -> \regfile[26] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3515 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [20] -> \regfile[26] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3516 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [21] -> \regfile[26] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3517 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [22] -> \regfile[26] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3518 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [23] -> \regfile[26] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3519 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [24] -> \regfile[26] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3520 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [25] -> \regfile[26] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3521 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [26] -> \regfile[26] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3522 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [27] -> \regfile[26] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3523 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [28] -> \regfile[26] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3524 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [29] -> \regfile[26] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3525 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [30] -> \regfile[26] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3526 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1876 [31] -> \regfile[26] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4293 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [0] -> \regfile[9] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4294 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [1] -> \regfile[9] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4295 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [2] -> \regfile[9] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4296 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [3] -> \regfile[9] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4297 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [4] -> \regfile[9] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4298 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [5] -> \regfile[9] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4299 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [6] -> \regfile[9] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4300 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [7] -> \regfile[9] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4301 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [8] -> \regfile[9] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4302 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [9] -> \regfile[9] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4303 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [10] -> \regfile[9] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4304 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [11] -> \regfile[9] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4305 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [12] -> \regfile[9] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4306 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [13] -> \regfile[9] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4307 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [14] -> \regfile[9] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4308 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [15] -> \regfile[9] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4309 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [16] -> \regfile[9] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4310 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [17] -> \regfile[9] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4311 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [18] -> \regfile[9] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4312 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [19] -> \regfile[9] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4313 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [20] -> \regfile[9] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4314 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [21] -> \regfile[9] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4315 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [22] -> \regfile[9] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4316 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [23] -> \regfile[9] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4317 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [24] -> \regfile[9] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4318 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [25] -> \regfile[9] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4319 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [26] -> \regfile[9] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4320 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [27] -> \regfile[9] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4321 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [28] -> \regfile[9] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4322 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [29] -> \regfile[9] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4323 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [30] -> \regfile[9] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4324 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1760 [31] -> \regfile[9] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4325 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [0] -> \regfile[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4326 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [1] -> \regfile[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4327 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [2] -> \regfile[0] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4328 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [3] -> \regfile[0] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4329 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [4] -> \regfile[0] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4330 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [5] -> \regfile[0] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4331 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [6] -> \regfile[0] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4332 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [7] -> \regfile[0] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4333 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [8] -> \regfile[0] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4334 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [9] -> \regfile[0] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4335 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [10] -> \regfile[0] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4336 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [11] -> \regfile[0] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4337 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [12] -> \regfile[0] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4338 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [13] -> \regfile[0] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4339 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [14] -> \regfile[0] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4340 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [15] -> \regfile[0] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4341 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [16] -> \regfile[0] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4342 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [17] -> \regfile[0] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4343 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [18] -> \regfile[0] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4344 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [19] -> \regfile[0] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4345 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [20] -> \regfile[0] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4346 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [21] -> \regfile[0] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4347 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [22] -> \regfile[0] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4348 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [23] -> \regfile[0] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4349 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [24] -> \regfile[0] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4350 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [25] -> \regfile[0] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4351 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [26] -> \regfile[0] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4352 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [27] -> \regfile[0] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4353 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [28] -> \regfile[0] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4354 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [29] -> \regfile[0] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4355 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [30] -> \regfile[0] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4356 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1686 [31] -> \regfile[0] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4358 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [0] -> \regfile[20] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4359 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [1] -> \regfile[20] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4360 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [2] -> \regfile[20] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4361 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [3] -> \regfile[20] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4362 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [4] -> \regfile[20] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4363 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [5] -> \regfile[20] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4364 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [6] -> \regfile[20] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4365 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [7] -> \regfile[20] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4366 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [8] -> \regfile[20] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4367 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [9] -> \regfile[20] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4368 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [10] -> \regfile[20] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4369 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [11] -> \regfile[20] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4370 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [12] -> \regfile[20] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4371 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [13] -> \regfile[20] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4372 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [14] -> \regfile[20] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4373 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [15] -> \regfile[20] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4374 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [16] -> \regfile[20] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4375 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [17] -> \regfile[20] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4376 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [18] -> \regfile[20] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4377 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [19] -> \regfile[20] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4378 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [20] -> \regfile[20] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4379 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [21] -> \regfile[20] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4380 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [22] -> \regfile[20] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4381 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [23] -> \regfile[20] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4382 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [24] -> \regfile[20] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4383 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [25] -> \regfile[20] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4384 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [26] -> \regfile[20] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4385 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [27] -> \regfile[20] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4386 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [28] -> \regfile[20] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4387 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [29] -> \regfile[20] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4388 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [30] -> \regfile[20] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4389 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1836 [31] -> \regfile[20] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4391 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [0] -> \regfile[16] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4392 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [1] -> \regfile[16] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4393 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [2] -> \regfile[16] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4394 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [3] -> \regfile[16] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4395 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [4] -> \regfile[16] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4396 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [5] -> \regfile[16] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4397 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [6] -> \regfile[16] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4398 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [7] -> \regfile[16] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4399 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [8] -> \regfile[16] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4400 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [9] -> \regfile[16] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4401 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [10] -> \regfile[16] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4402 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [11] -> \regfile[16] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4403 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [12] -> \regfile[16] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4404 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [13] -> \regfile[16] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4405 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [14] -> \regfile[16] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4406 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [15] -> \regfile[16] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4407 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [16] -> \regfile[16] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4408 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [17] -> \regfile[16] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4409 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [18] -> \regfile[16] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4410 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [19] -> \regfile[16] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4411 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [20] -> \regfile[16] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4412 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [21] -> \regfile[16] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4413 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [22] -> \regfile[16] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4414 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [23] -> \regfile[16] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4415 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [24] -> \regfile[16] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4416 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [25] -> \regfile[16] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4417 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [26] -> \regfile[16] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4418 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [27] -> \regfile[16] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4419 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [28] -> \regfile[16] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4420 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [29] -> \regfile[16] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4421 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [30] -> \regfile[16] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4422 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1810 [31] -> \regfile[16] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4563 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [0] -> \regfile[14] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4564 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [1] -> \regfile[14] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4565 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [2] -> \regfile[14] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4566 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [3] -> \regfile[14] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4567 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [4] -> \regfile[14] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4568 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [5] -> \regfile[14] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4569 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [6] -> \regfile[14] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4570 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [7] -> \regfile[14] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4571 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [8] -> \regfile[14] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4572 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [9] -> \regfile[14] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4573 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [10] -> \regfile[14] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4574 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [11] -> \regfile[14] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4575 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [12] -> \regfile[14] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4576 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [13] -> \regfile[14] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4577 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [14] -> \regfile[14] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4578 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [15] -> \regfile[14] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4579 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [16] -> \regfile[14] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4580 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [17] -> \regfile[14] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4581 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [18] -> \regfile[14] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4582 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [19] -> \regfile[14] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4583 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [20] -> \regfile[14] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4584 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [21] -> \regfile[14] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4585 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [22] -> \regfile[14] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4586 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [23] -> \regfile[14] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4587 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [24] -> \regfile[14] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4588 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [25] -> \regfile[14] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4589 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [26] -> \regfile[14] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4590 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [27] -> \regfile[14] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4591 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [28] -> \regfile[14] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4592 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [29] -> \regfile[14] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4593 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [30] -> \regfile[14] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4594 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1792 [31] -> \regfile[14] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5569 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [0] -> \regfile[4] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5570 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [1] -> \regfile[4] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5571 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [2] -> \regfile[4] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5572 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [3] -> \regfile[4] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5573 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [4] -> \regfile[4] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5574 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [5] -> \regfile[4] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5575 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [6] -> \regfile[4] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5576 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [7] -> \regfile[4] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5577 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [8] -> \regfile[4] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5578 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [9] -> \regfile[4] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5579 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [10] -> \regfile[4] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5580 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [11] -> \regfile[4] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5581 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [12] -> \regfile[4] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5582 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [13] -> \regfile[4] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5583 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [14] -> \regfile[4] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5584 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [15] -> \regfile[4] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5585 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [16] -> \regfile[4] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5586 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [17] -> \regfile[4] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5587 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [18] -> \regfile[4] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5588 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [19] -> \regfile[4] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5589 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [20] -> \regfile[4] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5590 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [21] -> \regfile[4] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5591 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [22] -> \regfile[4] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5592 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [23] -> \regfile[4] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5593 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [24] -> \regfile[4] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5594 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [25] -> \regfile[4] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5595 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [26] -> \regfile[4] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5596 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [27] -> \regfile[4] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5597 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [28] -> \regfile[4] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5598 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [29] -> \regfile[4] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5599 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [30] -> \regfile[4] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5600 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1724 [31] -> \regfile[4] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5977 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [0] -> \regfile[11] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5978 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [1] -> \regfile[11] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5979 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [2] -> \regfile[11] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5980 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [3] -> \regfile[11] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5981 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [4] -> \regfile[11] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5982 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [5] -> \regfile[11] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5983 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [6] -> \regfile[11] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5984 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [7] -> \regfile[11] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5985 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [8] -> \regfile[11] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5986 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [9] -> \regfile[11] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5987 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [10] -> \regfile[11] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5988 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [11] -> \regfile[11] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5989 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [12] -> \regfile[11] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5990 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [13] -> \regfile[11] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5991 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [14] -> \regfile[11] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5992 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [15] -> \regfile[11] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5993 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [16] -> \regfile[11] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5994 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [17] -> \regfile[11] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5995 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [18] -> \regfile[11] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5996 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [19] -> \regfile[11] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5997 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [20] -> \regfile[11] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5998 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [21] -> \regfile[11] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5999 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [22] -> \regfile[11] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6000 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [23] -> \regfile[11] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6001 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [24] -> \regfile[11] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6002 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [25] -> \regfile[11] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6003 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [26] -> \regfile[11] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6004 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [27] -> \regfile[11] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6005 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [28] -> \regfile[11] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6006 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [29] -> \regfile[11] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6007 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [30] -> \regfile[11] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6008 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1772 [31] -> \regfile[11] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6055 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [0] -> \regfile[8] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6056 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [1] -> \regfile[8] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6057 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [2] -> \regfile[8] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6058 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [3] -> \regfile[8] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6059 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [4] -> \regfile[8] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6060 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [5] -> \regfile[8] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6061 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [6] -> \regfile[8] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6062 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [7] -> \regfile[8] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6063 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [8] -> \regfile[8] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6064 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [9] -> \regfile[8] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6065 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [10] -> \regfile[8] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6066 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [11] -> \regfile[8] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6067 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [12] -> \regfile[8] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6068 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [13] -> \regfile[8] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6069 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [14] -> \regfile[8] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6070 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [15] -> \regfile[8] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6071 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [16] -> \regfile[8] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6072 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [17] -> \regfile[8] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6073 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [18] -> \regfile[8] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6074 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [19] -> \regfile[8] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6075 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [20] -> \regfile[8] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6076 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [21] -> \regfile[8] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6077 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [22] -> \regfile[8] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6078 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [23] -> \regfile[8] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6079 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [24] -> \regfile[8] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6080 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [25] -> \regfile[8] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6081 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [26] -> \regfile[8] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6082 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [27] -> \regfile[8] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6083 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [28] -> \regfile[8] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6084 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [29] -> \regfile[8] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6085 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [30] -> \regfile[8] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6086 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1754 [31] -> \regfile[8] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6685 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [0] -> \regfile[29] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6686 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [1] -> \regfile[29] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6687 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [2] -> \regfile[29] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6688 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [3] -> \regfile[29] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6689 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [4] -> \regfile[29] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6690 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [5] -> \regfile[29] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6691 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [6] -> \regfile[29] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6692 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [7] -> \regfile[29] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6693 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [8] -> \regfile[29] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6694 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [9] -> \regfile[29] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6695 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [10] -> \regfile[29] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6696 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [11] -> \regfile[29] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6697 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [12] -> \regfile[29] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6698 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [13] -> \regfile[29] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6699 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [14] -> \regfile[29] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6700 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [15] -> \regfile[29] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6701 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [16] -> \regfile[29] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6702 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [17] -> \regfile[29] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6703 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [18] -> \regfile[29] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6704 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [19] -> \regfile[29] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6705 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [20] -> \regfile[29] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6706 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [21] -> \regfile[29] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6707 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [22] -> \regfile[29] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6708 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [23] -> \regfile[29] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6709 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [24] -> \regfile[29] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6710 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [25] -> \regfile[29] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6711 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [26] -> \regfile[29] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6712 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [27] -> \regfile[29] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6713 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [28] -> \regfile[29] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6714 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [29] -> \regfile[29] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6715 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [30] -> \regfile[29] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6716 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1896 [31] -> \regfile[29] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7719 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [0] -> \regfile[15] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7720 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [1] -> \regfile[15] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7721 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [2] -> \regfile[15] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7722 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [3] -> \regfile[15] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7723 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [4] -> \regfile[15] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7724 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [5] -> \regfile[15] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7725 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [6] -> \regfile[15] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7726 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [7] -> \regfile[15] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7727 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [8] -> \regfile[15] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7728 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [9] -> \regfile[15] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7729 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [10] -> \regfile[15] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7730 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [11] -> \regfile[15] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7731 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [12] -> \regfile[15] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7732 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [13] -> \regfile[15] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7733 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [14] -> \regfile[15] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7734 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [15] -> \regfile[15] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7735 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [16] -> \regfile[15] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7736 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [17] -> \regfile[15] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7737 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [18] -> \regfile[15] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7738 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [19] -> \regfile[15] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7739 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [20] -> \regfile[15] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7740 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [21] -> \regfile[15] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7741 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [22] -> \regfile[15] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7742 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [23] -> \regfile[15] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7743 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [24] -> \regfile[15] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7744 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [25] -> \regfile[15] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7745 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [26] -> \regfile[15] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7746 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [27] -> \regfile[15] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7747 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [28] -> \regfile[15] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7748 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [29] -> \regfile[15] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7749 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [30] -> \regfile[15] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7750 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1798 [31] -> \regfile[15] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8655 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [0] -> \regfile[22] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8656 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [1] -> \regfile[22] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8657 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [2] -> \regfile[22] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8658 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [3] -> \regfile[22] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8659 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [4] -> \regfile[22] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8660 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [5] -> \regfile[22] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8661 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [6] -> \regfile[22] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8662 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [7] -> \regfile[22] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8663 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [8] -> \regfile[22] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8664 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [9] -> \regfile[22] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8665 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [10] -> \regfile[22] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8666 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [11] -> \regfile[22] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8667 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [12] -> \regfile[22] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8668 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [13] -> \regfile[22] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8669 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [14] -> \regfile[22] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8670 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [15] -> \regfile[22] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8671 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [16] -> \regfile[22] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8672 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [17] -> \regfile[22] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8673 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [18] -> \regfile[22] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8674 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [19] -> \regfile[22] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8675 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [20] -> \regfile[22] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8676 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [21] -> \regfile[22] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8677 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [22] -> \regfile[22] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8678 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [23] -> \regfile[22] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8679 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [24] -> \regfile[22] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8680 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [25] -> \regfile[22] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8681 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [26] -> \regfile[22] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8682 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [27] -> \regfile[22] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8683 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [28] -> \regfile[22] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8684 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [29] -> \regfile[22] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8685 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [30] -> \regfile[22] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8686 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1848 [31] -> \regfile[22] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9198 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [0] -> \x10 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9199 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [1] -> \x10 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9200 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [2] -> \x10 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9201 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [3] -> \x10 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9202 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [4] -> \x10 [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9203 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [5] -> \x10 [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9204 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [6] -> \x10 [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9205 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [7] -> \x10 [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9206 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [8] -> \x10 [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9207 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [9] -> \x10 [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9208 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [10] -> \x10 [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9209 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [11] -> \x10 [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9210 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [12] -> \x10 [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9211 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [13] -> \x10 [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9212 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [14] -> \x10 [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9213 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [15] -> \x10 [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9214 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [16] -> \x10 [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9215 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [17] -> \x10 [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9216 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [18] -> \x10 [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9217 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [19] -> \x10 [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9218 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [20] -> \x10 [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9219 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [21] -> \x10 [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9220 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [22] -> \x10 [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9221 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [23] -> \x10 [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9222 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [24] -> \x10 [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9223 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [25] -> \x10 [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9224 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [26] -> \x10 [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9225 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [27] -> \x10 [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9226 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [28] -> \x10 [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9227 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [29] -> \x10 [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9228 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [30] -> \x10 [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9229 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1571 [31] -> \x10 [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9264 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [0] -> \regfile[12] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9265 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [1] -> \regfile[12] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9266 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [2] -> \regfile[12] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9267 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [3] -> \regfile[12] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9268 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [4] -> \regfile[12] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9269 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [5] -> \regfile[12] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9270 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [6] -> \regfile[12] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9271 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [7] -> \regfile[12] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9272 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [8] -> \regfile[12] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9273 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [9] -> \regfile[12] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9274 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [10] -> \regfile[12] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9275 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [11] -> \regfile[12] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9276 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [12] -> \regfile[12] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9277 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [13] -> \regfile[12] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9278 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [14] -> \regfile[12] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9279 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [15] -> \regfile[12] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9280 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [16] -> \regfile[12] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9281 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [17] -> \regfile[12] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9282 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [18] -> \regfile[12] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9283 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [19] -> \regfile[12] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9284 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [20] -> \regfile[12] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9285 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [21] -> \regfile[12] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9286 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [22] -> \regfile[12] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9287 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [23] -> \regfile[12] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9288 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [24] -> \regfile[12] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9289 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [25] -> \regfile[12] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9290 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [26] -> \regfile[12] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9291 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [27] -> \regfile[12] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9292 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [28] -> \regfile[12] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9293 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [29] -> \regfile[12] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9294 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [30] -> \regfile[12] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9295 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1780 [31] -> \regfile[12] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9807 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [0] -> \regfile[30] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9808 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [1] -> \regfile[30] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9809 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [2] -> \regfile[30] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9810 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [3] -> \regfile[30] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9811 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [4] -> \regfile[30] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9812 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [5] -> \regfile[30] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9813 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [6] -> \regfile[30] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9814 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [7] -> \regfile[30] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9815 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [8] -> \regfile[30] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9816 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [9] -> \regfile[30] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9817 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [10] -> \regfile[30] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9818 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [11] -> \regfile[30] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9819 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [12] -> \regfile[30] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9820 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [13] -> \regfile[30] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9821 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [14] -> \regfile[30] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9822 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [15] -> \regfile[30] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9823 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [16] -> \regfile[30] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9824 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [17] -> \regfile[30] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9825 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [18] -> \regfile[30] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9826 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [19] -> \regfile[30] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9827 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [20] -> \regfile[30] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9828 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [21] -> \regfile[30] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9829 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [22] -> \regfile[30] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9830 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [23] -> \regfile[30] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9831 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [24] -> \regfile[30] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9832 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [25] -> \regfile[30] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9833 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [26] -> \regfile[30] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9834 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [27] -> \regfile[30] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9835 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [28] -> \regfile[30] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9836 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [29] -> \regfile[30] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9837 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [30] -> \regfile[30] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9838 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1902 [31] -> \regfile[30] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9864 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [0] -> \regfile[10] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9865 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [1] -> \regfile[10] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9866 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [2] -> \regfile[10] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9867 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [3] -> \regfile[10] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9868 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [4] -> \regfile[10] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9869 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [5] -> \regfile[10] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9870 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [6] -> \regfile[10] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9871 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [7] -> \regfile[10] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9872 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [8] -> \regfile[10] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9873 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [9] -> \regfile[10] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9874 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [10] -> \regfile[10] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9875 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [11] -> \regfile[10] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9876 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [12] -> \regfile[10] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9877 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [13] -> \regfile[10] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9878 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [14] -> \regfile[10] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9879 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [15] -> \regfile[10] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9880 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [16] -> \regfile[10] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9881 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [17] -> \regfile[10] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9882 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [18] -> \regfile[10] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9883 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [19] -> \regfile[10] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9884 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [20] -> \regfile[10] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9885 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [21] -> \regfile[10] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9886 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [22] -> \regfile[10] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9887 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [23] -> \regfile[10] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9888 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [24] -> \regfile[10] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9889 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [25] -> \regfile[10] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9890 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [26] -> \regfile[10] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9891 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [27] -> \regfile[10] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9892 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [28] -> \regfile[10] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9893 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [29] -> \regfile[10] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9894 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [30] -> \regfile[10] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9895 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1766 [31] -> \regfile[10] [31].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~1288 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2278 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in nerv.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in nerv.
  Merging $auto$simplemap.cc:277:simplemap_mux$4495 (A=\npc [1], B=1'0, S=$logic_or$nerv.sv:428$93_Y) into $auto$simplemap.cc:420:simplemap_dff$10089 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4494 (A=\npc [0], B=1'0, S=$logic_or$nerv.sv:428$93_Y) into $auto$simplemap.cc:420:simplemap_dff$10088 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2271 (A=1'0, B=\pc [0], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10186 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2272 (A=1'0, B=\pc [1], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10187 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2273 (A=1'0, B=\pc [2], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10188 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2274 (A=1'0, B=\pc [3], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10189 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2275 (A=1'0, B=\pc [4], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10190 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2276 (A=1'0, B=\pc [5], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10191 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2277 (A=1'0, B=\pc [6], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10192 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2278 (A=1'0, B=\pc [7], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10193 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2280 (A=1'0, B=\pc [9], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10195 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2281 (A=1'0, B=\pc [10], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10196 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2282 (A=1'0, B=\pc [11], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10197 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2283 (A=1'0, B=\pc [12], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10198 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2284 (A=1'0, B=\pc [13], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10199 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2285 (A=1'0, B=\pc [14], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10200 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2286 (A=1'0, B=\pc [15], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10201 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2287 (A=1'0, B=\pc [16], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10202 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2288 (A=1'0, B=\pc [17], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10203 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2289 (A=1'0, B=\pc [18], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10204 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2290 (A=1'0, B=\pc [19], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10205 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2291 (A=1'0, B=\pc [20], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10206 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2292 (A=1'0, B=\pc [21], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10207 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2293 (A=1'0, B=\pc [22], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10208 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2294 (A=1'0, B=\pc [23], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10209 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2295 (A=1'0, B=\pc [24], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10210 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2296 (A=1'0, B=\pc [25], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10211 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2297 (A=1'0, B=\pc [26], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10212 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2298 (A=1'0, B=\pc [27], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10213 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2299 (A=1'0, B=\pc [28], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10214 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2300 (A=1'0, B=\pc [29], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10215 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2301 (A=1'0, B=\pc [30], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10216 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2302 (A=1'0, B=\pc [31], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10217 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2175 (A=\imem_data [0], B=1'1, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10218 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2176 (A=\imem_data [1], B=1'1, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10219 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2177 (A=\imem_data [2], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10220 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2178 (A=\imem_data [3], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10221 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2179 (A=\imem_data [4], B=1'1, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10222 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2180 (A=\imem_data [5], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10223 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2279 (A=1'0, B=\pc [8], S=$auto$rtlil.cc:1864:Xor$1227) into $auto$simplemap.cc:420:simplemap_dff$10194 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2181 (A=\imem_data [6], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2184 (A=\imem_data [9], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2185 (A=\imem_data [10], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2186 (A=\imem_data [11], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2188 (A=\imem_data [13], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10231 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2190 (A=\imem_data [15], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10233 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2191 (A=\imem_data [16], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10234 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2192 (A=\imem_data [17], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10235 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2193 (A=\imem_data [18], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10236 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2194 (A=\imem_data [19], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10237 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2195 (A=\imem_data [20], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10238 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2196 (A=\imem_data [21], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10239 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2197 (A=\imem_data [22], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10240 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2198 (A=\imem_data [23], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10241 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2199 (A=\imem_data [24], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10242 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2200 (A=\imem_data [25], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10243 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2201 (A=\imem_data [26], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10244 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2202 (A=\imem_data [27], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10245 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2203 (A=\imem_data [28], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10246 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2204 (A=\imem_data [29], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10247 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2205 (A=\imem_data [30], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10248 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2206 (A=\imem_data [31], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10249 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2183 (A=\imem_data [8], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10226 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4595 (A=$logic_and$nerv.sv:437$98_Y, B=1'1, S=$1\mem_rd_enable[0:0]) into $auto$simplemap.cc:420:simplemap_dff$10373 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$9739 (A=1'0, B=$2\j_b_check[0:0], S=$logic_and$nerv.sv:276$39_Y) into $auto$simplemap.cc:420:simplemap_dff$10372 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2182 (A=\imem_data [7], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10225 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$10087 (A=\mem_rd_enable, B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$10406 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2187 (A=\imem_data [12], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10230 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2189 (A=\imem_data [14], B=1'0, S=\stall_ID) into $auto$simplemap.cc:420:simplemap_dff$10232 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~261 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~657 debug messages>
Removed a total of 219 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 68 unused cells and 7428 unused wires.
<suppressed ~71 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\nerv' to `<abc-temp-dir>/input.blif'..
Extracted 6048 gates and 7572 wires to a netlist network with 1522 inputs and 429 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =    1207.
ABC: Participating nodes from both networks       =    2520.
ABC: Participating nodes from the first network   =    1217. (  35.93 % of nodes)
ABC: Participating nodes from the second network  =    1303. (  38.47 % of nodes)
ABC: Node pairs (any polarity)                    =    1216. (  35.90 % of names can be moved)
ABC: Node pairs (same polarity)                   =     783. (  23.12 % of names can be moved)
ABC: Total runtime =     0.10 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     6772
ABC RESULTS:        internal signals:     5621
ABC RESULTS:           input signals:     1522
ABC RESULTS:          output signals:      429
Removing temp directory.
Removed 3 unused cells and 2492 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001111110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110011001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110011000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010111100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001110011000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
No more expansions possible.
<suppressed ~5223 debug messages>
Removed 0 unused cells and 6772 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \nerv

2.43.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.44. Printing statistics.

=== nerv ===

   Number of wires:               3429
   Number of wire bits:           5848
   Number of public wires:          90
   Number of public wire bits:    1982
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5290
     SB_CARRY                      368
     SB_DFF                        132
     SB_DFFE                      1084
     SB_DFFESR                       2
     SB_DFFSR                       63
     SB_DFFSS                        4
     SB_LUT4                      3637

2.45. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.46. Executing JSON backend.

Warnings: 2 unique messages, 6 total
End of script. Logfile hash: 0db765180e
CPU: user 5.34s system 0.06s, MEM: 56.16 MB total, 49.69 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 18x opt_merge (1 sec), 21% 27x opt_expr (1 sec), ...
